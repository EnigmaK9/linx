# -*- coding: utf-8 -*-
"""modulo_13_04_24.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vEUJKH5tvWHvs3tnT40sY7kPvlzOYjji
"""

from ipywidgets import interact, widgets
from IPython.display import display
import matplotlib.pyplot as plt
import numpy as np
# Estilos y colores personalizados
style = {'description_width': 'initial'}
slider_style = {'description_width': 'initial', 'handle_color': '#4CAF50'}
button_style = {'button_color': '#4CAF50'}

# Definición de la clase Tarea
class Tarea:
    def __init__(self, nombre, prioridad=0.5, peso=1, consumo=0, duracion=0):
        '''Inicializa una tarea con un nombre, prioridad, peso, etc... por defecto'''
        self.nombre = nombre
        self.prioridad = prioridad
        self.peso = peso
        self.consumo = consumo
        self.duracion = duracion

    def __repr__(self):
        '''Representación de la tarea en forma de cadena'''
        return f"Tarea({self.nombre}, prioridad={self.prioridad}, peso={self.peso}, consumo={self.consumo}, duracion={self.duracion})"

# Definición de clase para el uso de dos decimales
def dos_decimales(low, high):
    decimales = np.random.uniform(low, high)
    redondeo = np.round(decimales, 2)
    return redondeo

#Definición de la clase VectorTareas
class VectorTareas:
    def __init__(self, longitud=5):
        '''Inicializa un vector de tareas con una longitud dada'''
        self.longitud = longitud
        # Ajustar los pesos de las tareas según lo solicitado
        self.tareas = [Tarea(f"Tarea {i+1}", peso=1 if i < 2 else 0 if i == 2 else dos_decimales(0, 1),
                     consumo=10 if i == 0 else 20 if i == 1 else 30 if i == 2 else dos_decimales(10, 100), prioridad = dos_decimales(0, 1), duracion = dos_decimales(1,50)) for i in range(self.longitud)]

    def ordenar_por_peso_ascendente(self):
        '''Ordena las tareas por peso de menor a mayor'''
        self.tareas.sort(key=lambda tarea: tarea.peso)

    def ordenar_por_peso_descendente(self):
        '''Ordena las tareas por peso de mayor a menor'''
        self.tareas.sort(key=lambda tarea: tarea.peso, reverse=True)

    def ordenar_por_consumo_ascendente(self):
        '''Ordena las tareas por consumo de menor a mayor'''
        self.tareas.sort(key=lambda tarea: tarea.consumo)

    def ordenar_por_consumo_descendente(self):
        '''Ordena las tareas por consumo de mayor a menor'''
        self.tareas.sort(key=lambda tarea: tarea.consumo, reverse=True)

    def ordenar_por_prioridad_ascendente(self):
        '''Ordena las tareas por prioridad de menor a mayor'''
        self.tareas.sort(key=lambda tarea: tarea.prioridad)

    def ordenar_por_prioridad_descendente(self):
        '''Ordena las tareas por prioridad de mayor a menor'''
        self.tareas.sort(key=lambda tarea: tarea.prioridad, reverse=True)

    def ordenar_por_duracion_ascendente(self):
        '''Ordena las tareas por duración de menor a mayor'''
        self.tareas.sort(key=lambda tarea: tarea.duracion)

    def ordenar_por_duracion_descendente(self):
        '''Ordena las tareas por duración de mayor a menor'''
        self.tareas.sort(key=lambda tarea: tarea.duracion, reverse=True)

    def ordenar_por_prioridadConsumo_ascendente(self):
        '''Ordena las tareas por prioridad y consumo de menor a mayor'''
        self.tareas.sort(key=lambda tarea: (tarea.prioridad, tarea.consumo))

    def ordenar_por_prioridadConsumo_descendente(self):
        '''Ordena las tareas por prioridad y consumo de menor a mayor'''
        self.tareas.sort(key=lambda tarea: (tarea.prioridad, tarea.consumo), reverse=True)


    def mostrar(self):
        '''Muestra todas las tareas en el vector'''
        for tarea in self.tareas:
            print(tarea)

    def cambiar_longitud(self, longitud):
        '''Cambia la longitud del vector y crea nuevas tareas si es necesario'''
        self.longitud = longitud
        # Ajustar los pesos de las tareas según lo solicitado
        self.tareas = [Tarea(f"Tarea {i+1}", peso=1 if i < 2 else 0 if i == 2 else dos_decimales(0, 1),
                     consumo=10 if i == 0 else 20 if i == 1 else 30 if i == 2 else dos_decimales(10, 100), prioridad = dos_decimales(0, 1), duracion = dos_decimales(1,50)) for i in range(self.longitud)]

# Funciones de GUI
def actualizar_vector(longitud):
    '''Actualiza el vector con una nueva longitud'''
    vector.cambiar_longitud(longitud)
    mostrar_vector()

def ordenar_vector(tipo_ordenamiento):
    '''Ordena el vector según el tipo de ordenamiento seleccionado'''
    if tipo_ordenamiento == "Ascendente_por_peso":
        vector.ordenar_por_peso_ascendente()
    elif tipo_ordenamiento == "Descendente_por_peso":
        vector.ordenar_por_peso_descendente()
    elif tipo_ordenamiento == "Ascendente_por_consumo":
        vector.ordenar_por_consumo_ascendente()
    elif tipo_ordenamiento == "Descendente_por_consumo":
        vector.ordenar_por_consumo_descendente()
    elif tipo_ordenamiento == "Ascendente_por_prioridad":
        vector.ordenar_por_prioridad_ascendente()
    elif tipo_ordenamiento == "Descendente_por_prioridad":
        vector.ordenar_por_prioridad_descendente()
    elif tipo_ordenamiento == "Ascendente_por_duracion":
        vector.ordenar_por_duracion_ascendente()
    elif tipo_ordenamiento == "Descendente_por_duracion":
        vector.ordenar_por_duracion_descendente()
    elif tipo_ordenamiento == "Acendente_PrioridadyConsumo":
        vector.ordenar_por_prioridadConsumo_ascendente()
    elif tipo_ordenamiento == "Descendente_PrioridadyConsumo":
        vector.ordenar_por_prioridadConsumo_descendente()
    mostrar_vector()

def mostrar_vector():
    '''Muestra las tareas del vector'''
    for tarea in vector.tareas:
        print(tarea)

# Crear vector inicial
vector = VectorTareas()

# Interacción con widgets
slider = widgets.IntSlider(min=1, max=10, style=slider_style)
interact_actualizar = interact(actualizar_vector, longitud=slider, style=style)
interact_ordenar = interact(ordenar_vector, tipo_ordenamiento=["Ascendente_por_peso", "Descendente_por_peso", "Ascendente_por_consumo", "Descendente_por_consumo", "Ascendente_por_prioridad", "Descendente_por_prioridad", "Ascendente_por_duracion", "Descendente_por_duracion", "Acendente_PrioridadyConsumo", "Descendente_PrioridadyConsumo"], style=style)